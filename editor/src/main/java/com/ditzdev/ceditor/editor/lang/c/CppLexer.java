// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: cpp.flex

package com.ditzdev.ceditor.editor.lang.c;

import com.ditzdev.ceditor.editor.util.Lexer;


@SuppressWarnings("fallthrough")
public class CppLexer implements Lexer {

	/** This character denotes the end of file. */
	public static final int YYEOF = -1;

	/** Initial size of the lookahead buffer. */
	private static final int ZZ_BUFFERSIZE = 16384;

	// Lexical states.
	public static final int YYINITIAL = 0;
	public static final int STRING = 2;
	public static final int CHARLITERAL = 4;
	public static final int PRETREATMENT = 6;
	public static final int INCLUDE = 8;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0,  0,  1,  1,  2,  2,  3,  3,  4, 4
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

	private static int [] zzUnpackcmap_top() {
		int [] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\2\7\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\30\1\31\1\30\2\32\1\7"+
    "\1\33\1\34\1\7\1\35\1\7\1\6\3\36\1\37"+
    "\1\40\1\37\5\41\1\42\3\41\1\43\7\41\1\44"+
    "\2\41\1\45\1\46\1\47\1\7\1\50\1\6\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\41\1\62\1\63\1\64\1\65\1\66\1\67\1\41"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\7\1\102\1\7\6\0\1\103\32\0"+
    "\1\104\1\6\4\12\4\6\1\12\2\6\1\0\7\6"+
    "\1\12\4\6\1\12\5\6\27\12\1\6\37\12\1\6"+
    "\u01ca\12\4\6\14\12\16\6\5\12\7\6\1\12\1\6"+
    "\1\12\21\6\160\0\5\12\1\6\2\12\2\6\4\12"+
    "\1\6\1\12\6\6\1\12\1\6\3\12\1\6\1\12"+
    "\1\6\24\12\1\6\123\12\1\6\213\12\1\6\5\0"+
    "\2\6\246\12\1\6\46\12\2\6\1\12\6\6\51\12"+
    "\6\6\1\12\1\6\55\0\1\6\1\0\1\6\2\0"+
    "\1\6\2\0\1\6\1\0\10\6\33\12\4\6\4\12"+
    "\15\6\6\0\5\6\1\12\4\6\13\0\1\6\1\0"+
    "\3\6\53\12\37\0\4\6\2\12\1\0\143\12\1\6"+
    "\1\12\10\0\1\6\6\0\2\12\2\0\1\6\4\0"+
    "\2\12\12\0\3\12\2\6\1\12\17\6\1\0\1\12"+
    "\1\0\36\12\33\0\2\6\131\12\13\0\1\12\16\6"+
    "\12\0\41\12\11\0\2\12\4\6\1\12\2\6\1\0"+
    "\30\12\4\0\1\12\11\0\1\12\3\0\1\12\5\0"+
    "\22\6\31\12\3\0\4\6\13\12\65\6\25\12\1\6"+
    "\22\12\13\6\61\0\66\12\3\0\1\12\22\0\1\12"+
    "\7\0\12\12\2\0\2\6\12\0\1\6\20\12\3\0"+
    "\1\6\10\12\2\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\1\12\3\6\4\12\2\6\1\0\1\12\7\0"+
    "\2\6\2\0\2\6\3\0\1\12\10\6\1\0\4\6"+
    "\2\12\1\6\3\12\2\0\2\6\12\0\4\12\7\6"+
    "\2\12\1\6\1\0\2\6\3\0\1\6\6\12\4\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\2\12\1\6"+
    "\2\12\1\6\2\12\2\6\1\0\1\6\5\0\4\6"+
    "\2\0\2\6\3\0\3\6\1\0\7\6\4\12\1\6"+
    "\1\12\7\6\14\0\3\12\1\0\13\6\3\0\1\6"+
    "\11\12\1\6\3\12\1\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\5\12\2\6\1\0\1\12\10\0\1\6"+
    "\3\0\1\6\3\0\2\6\1\12\17\6\2\12\2\0"+
    "\2\6\12\0\1\6\1\12\7\6\1\12\6\0\1\6"+
    "\3\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\3\0\4\6"+
    "\2\12\1\6\3\12\2\0\2\6\12\0\1\6\1\12"+
    "\20\6\1\0\1\12\1\6\6\12\3\6\3\12\1\6"+
    "\4\12\3\6\2\12\1\6\1\12\1\6\2\12\3\6"+
    "\2\12\3\6\3\12\3\6\14\12\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\12\6\6\1\0\16\6"+
    "\12\0\11\6\1\12\6\6\5\0\10\12\1\6\3\12"+
    "\1\6\27\12\1\6\20\12\3\6\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\1\6\3\12\5\6"+
    "\2\12\2\0\2\6\12\0\20\6\1\12\3\0\1\6"+
    "\10\12\1\6\3\12\1\6\27\12\1\6\12\12\1\6"+
    "\5\12\2\6\1\0\1\12\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\7\6\1\12\1\6\2\12\2\0"+
    "\2\6\12\0\1\6\2\12\15\6\4\0\11\12\1\6"+
    "\3\12\1\6\51\12\2\0\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\1\12\5\6\3\12\1\0\7\6\3\12"+
    "\2\0\2\6\12\0\12\6\6\12\1\6\3\0\1\6"+
    "\22\12\3\6\30\12\1\6\11\12\1\6\1\12\2\6"+
    "\7\12\3\6\1\0\4\6\6\0\1\6\1\0\1\6"+
    "\10\0\6\6\12\0\2\6\2\0\15\6\60\12\1\0"+
    "\2\12\7\0\4\6\10\12\10\0\1\6\12\0\47\6"+
    "\2\12\1\6\1\12\1\6\5\12\1\6\30\12\1\6"+
    "\1\12\1\6\12\12\1\0\2\12\11\0\1\12\2\6"+
    "\5\12\1\6\1\12\1\6\6\0\2\6\12\0\2\6"+
    "\4\12\40\6\1\12\27\6\2\0\6\6\12\0\13\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\2\0\10\12"+
    "\1\6\44\12\4\6\24\0\1\6\2\0\5\12\13\0"+
    "\1\6\44\0\11\6\1\0\71\6\53\12\24\0\1\12"+
    "\12\0\6\6\6\12\4\0\4\12\3\0\1\12\3\0"+
    "\2\12\7\0\3\12\4\0\15\12\14\0\1\12\17\0"+
    "\2\6\46\12\1\6\1\12\5\6\1\12\2\6\53\12"+
    "\1\6\115\12\1\6\4\12\2\6\7\12\1\6\1\12"+
    "\1\6\4\12\2\6\51\12\1\6\4\12\2\6\41\12"+
    "\1\6\4\12\2\6\7\12\1\6\1\12\1\6\4\12"+
    "\2\6\17\12\1\6\71\12\1\6\4\12\2\6\103\12"+
    "\2\6\3\0\40\6\20\12\20\6\126\12\2\6\6\12"+
    "\3\6\u016c\12\2\6\21\12\1\104\32\12\5\6\113\12"+
    "\3\6\13\12\7\6\15\12\1\6\4\12\3\0\13\6"+
    "\22\12\3\0\13\6\22\12\2\0\14\6\15\12\1\6"+
    "\3\12\1\6\2\0\14\6\64\12\40\0\3\6\1\12"+
    "\3\6\2\12\1\0\2\6\12\0\41\6\4\0\1\6"+
    "\12\0\6\6\131\12\7\6\5\12\2\0\42\12\1\0"+
    "\1\12\5\6\106\12\12\6\37\12\1\6\14\0\4\6"+
    "\14\0\12\6\12\0\36\12\2\6\5\12\13\6\54\12"+
    "\4\6\32\12\6\6\12\0\46\6\27\12\5\0\4\6"+
    "\65\12\12\0\1\6\35\0\2\6\13\0\6\6\12\0"+
    "\15\6\1\12\10\6\16\0\1\6\2\0\77\6\5\0"+
    "\57\12\21\0\7\12\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\12\15\0\2\12\12\0\54\12\16\0\14\6"+
    "\44\12\24\0\10\6\12\0\3\6\3\12\12\0\44\12"+
    "\2\6\11\12\7\6\53\12\2\6\3\12\20\6\3\0"+
    "\1\6\25\0\4\12\1\0\6\12\1\0\2\12\3\0"+
    "\1\12\5\6\300\12\72\0\1\6\5\0\26\12\2\6"+
    "\6\12\2\6\46\12\2\6\6\12\2\6\10\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\37\12\2\6"+
    "\65\12\1\6\7\12\1\6\1\12\3\6\3\12\1\6"+
    "\7\12\3\6\4\12\2\6\6\12\4\6\15\12\5\6"+
    "\3\12\1\6\7\12\3\6\13\104\5\0\30\6\2\3"+
    "\5\0\1\104\17\6\2\12\23\6\1\12\12\6\1\104"+
    "\5\0\1\6\12\0\1\6\1\12\15\6\1\12\20\6"+
    "\15\12\3\6\40\12\20\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\12\4\6\1\12\2\6\12\12\1\6"+
    "\1\12\3\6\5\12\6\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\4\12\1\6\13\12\2\6\4\12\5\6"+
    "\5\12\4\6\1\12\21\6\51\12\u0177\6\57\12\1\6"+
    "\57\12\1\6\205\12\6\6\4\12\3\0\2\12\14\6"+
    "\46\12\1\6\1\12\5\6\1\12\2\6\70\12\7\6"+
    "\1\12\17\6\1\0\27\12\11\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\40\0\57\6\1\12"+
    "\320\6\1\104\4\6\3\12\31\6\11\12\6\0\1\6"+
    "\5\12\2\6\5\12\4\6\126\12\2\6\2\0\2\6"+
    "\3\12\1\6\132\12\1\6\4\12\5\6\53\12\1\6"+
    "\136\12\21\6\40\12\60\6\320\12\100\6\375\12\3\6"+
    "\215\12\103\6\56\12\2\6\15\12\3\6\20\12\12\0"+
    "\2\12\24\6\57\12\1\0\4\6\12\0\1\6\37\12"+
    "\2\0\120\12\2\0\45\6\11\12\2\6\147\12\2\6"+
    "\65\12\2\6\11\12\52\6\15\12\1\0\3\12\1\0"+
    "\4\12\1\0\27\12\5\0\4\6\1\0\13\6\1\12"+
    "\7\6\64\12\14\6\2\0\62\12\22\0\12\6\12\0"+
    "\6\6\22\0\6\12\3\6\1\12\1\6\2\12\13\0"+
    "\34\12\10\0\2\6\27\12\15\0\14\6\35\12\3\6"+
    "\4\0\57\12\16\0\16\6\1\12\12\0\6\6\5\12"+
    "\1\0\12\12\12\0\5\12\1\6\51\12\16\0\11\6"+
    "\3\12\1\0\10\12\2\0\2\6\12\0\6\6\27\12"+
    "\3\6\1\12\3\0\62\12\1\0\1\12\3\0\2\12"+
    "\2\0\5\12\2\0\1\12\1\0\1\12\30\6\3\12"+
    "\2\6\13\12\5\0\2\6\3\12\2\0\12\6\6\12"+
    "\2\6\6\12\2\6\6\12\11\6\7\12\1\6\7\12"+
    "\1\6\53\12\1\6\16\12\6\6\163\12\10\0\1\6"+
    "\2\0\2\6\12\0\6\6\244\12\14\6\27\12\4\6"+
    "\61\12\4\6\u0100\105\156\12\2\6\152\12\46\6\7\12"+
    "\14\6\5\12\5\6\1\12\1\0\12\12\1\6\15\12"+
    "\1\6\5\12\1\6\1\12\1\6\2\12\1\6\2\12"+
    "\1\6\154\12\41\6\153\12\22\6\100\12\2\6\66\12"+
    "\50\6\15\12\3\6\20\0\20\6\20\0\3\6\2\12"+
    "\30\6\3\12\31\6\1\12\6\6\5\12\1\6\207\12"+
    "\2\6\1\0\4\6\1\12\13\6\12\0\7\6\32\12"+
    "\4\6\1\12\1\6\32\12\13\6\131\12\3\6\6\12"+
    "\2\6\6\12\2\6\6\12\2\6\3\12\3\6\2\12"+
    "\3\6\2\12\22\6\3\0\4\6\14\12\1\6\32\12"+
    "\1\6\23\12\1\6\2\12\1\6\17\12\2\6\16\12"+
    "\42\6\173\12\105\6\65\12\210\6\1\0\202\6\35\12"+
    "\3\6\61\12\17\6\1\0\37\6\40\12\15\6\36\12"+
    "\5\6\46\12\5\0\5\6\36\12\2\6\44\12\4\6"+
    "\10\12\1\6\5\12\52\6\236\12\2\6\12\0\6\6"+
    "\44\12\4\6\44\12\4\6\50\12\10\6\64\12\234\6"+
    "\67\12\11\6\26\12\12\6\10\12\230\6\6\12\2\6"+
    "\1\12\1\6\54\12\1\6\2\12\3\6\1\12\2\6"+
    "\27\12\12\6\27\12\11\6\37\12\101\6\23\12\1\6"+
    "\2\12\12\6\26\12\12\6\32\12\106\6\70\12\6\6"+
    "\2\12\100\6\1\12\3\0\1\6\2\0\5\6\4\0"+
    "\4\12\1\6\3\12\1\6\35\12\2\6\3\0\4\6"+
    "\1\0\40\6\35\12\3\6\35\12\43\6\10\12\1\6"+
    "\34\12\2\0\31\6\66\12\12\6\26\12\12\6\23\12"+
    "\15\6\22\12\156\6\111\12\67\6\63\12\15\6\63\12"+
    "\15\6\44\12\4\0\10\6\12\0\u0146\6\52\12\1\6"+
    "\2\0\3\6\2\12\116\6\35\12\12\6\1\12\10\6"+
    "\26\12\13\0\137\6\25\12\33\6\27\12\11\6\3\0"+
    "\65\12\17\0\37\6\12\0\17\6\4\0\55\12\13\0"+
    "\2\6\1\0\17\6\1\0\2\6\31\12\7\6\12\0"+
    "\6\6\3\0\44\12\16\0\1\6\12\0\4\6\1\12"+
    "\2\0\1\12\10\6\43\12\1\0\2\6\1\12\11\6"+
    "\3\0\60\12\16\0\4\12\4\6\4\0\1\6\14\0"+
    "\1\12\1\6\1\12\43\6\22\12\1\6\31\12\14\0"+
    "\6\6\1\0\101\6\7\12\1\6\1\12\1\6\4\12"+
    "\1\6\17\12\1\6\12\12\7\6\57\12\14\0\5\6"+
    "\12\0\6\6\4\0\1\6\10\12\2\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\2\12\1\6\5\12\1\6"+
    "\2\0\1\12\7\0\2\6\2\0\2\6\3\0\2\6"+
    "\1\12\6\6\1\0\5\6\5\12\2\0\2\6\7\0"+
    "\3\6\5\0\213\6\65\12\22\0\4\12\5\6\12\0"+
    "\4\6\1\0\3\12\36\6\60\12\24\0\2\12\1\6"+
    "\1\12\10\6\12\0\246\6\57\12\7\0\2\6\11\0"+
    "\27\6\4\12\2\0\42\6\60\12\21\0\3\6\1\12"+
    "\13\6\12\0\46\6\53\12\15\0\1\12\7\6\12\0"+
    "\66\6\33\12\2\6\17\0\4\6\12\0\306\6\54\12"+
    "\17\0\145\6\100\12\12\0\25\6\10\12\2\6\1\12"+
    "\2\6\10\12\1\6\2\12\1\6\30\12\6\0\1\6"+
    "\2\0\2\6\4\0\1\12\1\0\1\12\2\0\14\6"+
    "\12\0\106\6\10\12\2\6\47\12\7\0\2\6\7\0"+
    "\1\12\1\6\1\12\1\0\33\6\1\12\12\0\50\12"+
    "\7\0\1\12\4\0\10\6\1\0\10\6\1\12\13\0"+
    "\56\12\20\0\3\6\1\12\42\6\71\12\7\6\11\12"+
    "\1\6\45\12\10\0\1\6\10\0\1\12\17\6\12\0"+
    "\30\6\36\12\2\6\26\0\1\6\16\0\111\6\7\12"+
    "\1\6\2\12\1\6\46\12\6\0\3\6\1\0\1\6"+
    "\2\0\1\6\7\0\1\12\1\0\10\6\12\0\6\6"+
    "\6\12\1\6\2\12\1\6\40\12\5\0\1\6\2\0"+
    "\1\6\5\0\1\12\7\6\12\0\u0136\6\23\12\4\0"+
    "\271\6\1\12\54\6\4\12\37\6\232\12\146\6\157\12"+
    "\21\6\304\12\274\6\57\12\1\6\11\0\307\6\107\12"+
    "\271\6\71\12\7\6\37\12\1\6\12\0\146\6\36\12"+
    "\2\6\5\0\13\6\60\12\7\0\11\6\4\12\14\6"+
    "\12\0\11\6\25\12\5\6\23\12\260\6\100\12\200\6"+
    "\113\12\4\6\1\0\1\12\67\0\7\6\4\0\15\12"+
    "\100\6\2\12\1\6\1\12\1\0\13\6\2\0\16\6"+
    "\370\12\10\6\326\12\52\6\11\12\367\6\37\12\61\6"+
    "\3\12\21\6\4\12\10\6\u018c\12\4\6\153\12\5\6"+
    "\15\12\3\6\11\12\7\6\12\12\3\6\2\0\1\6"+
    "\4\0\301\6\5\0\3\6\26\0\2\6\7\0\36\6"+
    "\4\0\224\6\3\0\273\6\125\12\1\6\107\12\1\6"+
    "\2\12\2\6\1\12\2\6\2\12\2\6\4\12\1\6"+
    "\14\12\1\6\1\12\1\6\7\12\1\6\101\12\1\6"+
    "\4\12\2\6\10\12\1\6\7\12\1\6\34\12\1\6"+
    "\4\12\1\6\5\12\1\6\1\12\3\6\7\12\1\6"+
    "\u0154\12\2\6\31\12\1\6\31\12\1\6\37\12\1\6"+
    "\31\12\1\6\37\12\1\6\31\12\1\6\37\12\1\6"+
    "\31\12\1\6\37\12\1\6\31\12\1\6\10\12\2\6"+
    "\151\0\4\6\62\0\10\6\1\0\16\6\1\0\26\6"+
    "\5\0\1\6\17\0\120\6\7\0\1\6\21\0\2\6"+
    "\7\0\1\6\2\0\1\6\5\0\325\6\55\12\3\6"+
    "\7\0\7\12\2\6\12\0\4\6\1\12\u0171\6\54\12"+
    "\16\0\5\6\306\12\13\6\7\0\51\6\104\12\7\0"+
    "\1\12\4\6\12\0\u0156\6\1\12\117\6\4\12\1\6"+
    "\33\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\12\12\1\6\4\12\1\6\1\12\1\6\1\12\6\6"+
    "\1\12\4\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\3\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\2\12\1\6\1\12\2\6\4\12\1\6\7\12\1\6"+
    "\4\12\1\6\4\12\1\6\1\12\1\6\12\12\1\6"+
    "\21\12\5\6\3\12\1\6\5\12\1\6\21\12\u0134\6"+
    "\12\0\6\6\336\12\42\6\65\12\13\6\336\12\2\6"+
    "\u0182\12\16\6\u0131\12\37\6\36\12\342\6\113\12\266\6"+
    "\1\0\36\6\140\0\200\6\360\0\20\6";

	private static int [] zzUnpackcmap_blocks() {
		int [] result = new int[31232];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int [] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\4\2\14\1\15"+
    "\1\16\1\17\23\6\1\20\1\21\1\22\2\23\1\24"+
    "\1\1\1\25\1\26\1\1\3\27\2\1\10\0\1\30"+
    "\2\31\4\14\2\30\1\0\1\14\1\0\11\6\1\32"+
    "\10\6\1\32\27\6\2\22\1\25\1\27\1\0\1\22"+
    "\1\0\1\22\4\0\1\33\6\0\1\31\2\14\1\0"+
    "\1\30\2\14\21\6\1\34\35\6\10\0\2\31\3\14"+
    "\2\6\1\34\40\6\1\33\4\0\3\14\2\6\1\32"+
    "\24\6\3\0\3\14\13\6\2\0\3\14\5\6\1\35"+
    "\3\14\2\6\3\14\1\6\3\14\1\6\2\14\1\0"+
    "\2\14\1\0\2\14\1\0\2\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\30\1\0\1\30\1\0\4\30";

	private static int [] zzUnpackAction() {
		int [] result = new int[340];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u015e\0\u015e"+
    "\0\u01a4\0\u015e\0\u015e\0\u01ea\0\u0230\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u0276\0\u02bc\0\u0302\0\u0348\0\u015e\0\u015e\0\u015e"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u015e\0\u015e\0\u08c0\0\u015e\0\u0906"+
    "\0\u015e\0\u094c\0\u015e\0\u015e\0\u0992\0\u015e\0\u02bc\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u01ea\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u0e38\0\u0e7e\0\u015e\0\u0ec4\0\u015e\0\u0f0a\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u0230\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u015e\0\u1a86\0\u1acc\0\u1b12\0\u0a1e\0\u0a1e\0\u0a64\0\u0a64"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2"+
    "\0\u2418\0\u245e\0\u24a4\0\u0230\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec"+
    "\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c"+
    "\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c"+
    "\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c"+
    "\0\u2ec2\0\u015e\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u015e\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0"+
    "\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600"+
    "\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u3c28"+
    "\0\u4830\0\u4876\0\u48bc\0\u015e\0\u4902\0\u4948\0\u498e\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04"+
    "\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34"+
    "\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u517c\0\u51c2\0\u5208\0\u524e"+
    "\0\u5294\0\u52da\0\u5320\0\u5366";

	private static int [] zzUnpackRowMap() {
		int [] result = new int[340];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int [] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int [] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\3\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\12\1\21\1\12\1\22"+
    "\1\23\1\24\6\25\1\26\2\12\7\15\1\27\1\6"+
    "\1\30\1\15\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\15\1\40\1\15\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\3\15"+
    "\1\54\1\55\1\10\1\7\1\6\2\56\1\57\2\56"+
    "\1\60\2\56\1\61\35\56\1\62\37\56\2\63\1\57"+
    "\2\63\1\60\5\63\1\64\32\63\1\65\37\63\2\66"+
    "\3\57\1\60\15\66\1\67\22\66\1\70\34\66\1\57"+
    "\1\66\2\6\1\66\3\57\1\60\2\6\1\71\10\6"+
    "\2\66\1\67\7\66\1\6\1\72\1\6\7\66\3\6"+
    "\31\66\2\6\1\57\1\66\1\6\110\0\1\10\104\0"+
    "\1\73\2\0\1\73\47\0\1\74\1\75\3\0\1\76"+
    "\1\0\1\77\3\0\1\100\3\0\1\101\1\0\1\102"+
    "\10\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\31\15\2\0\1\15\26\0\7\103\71\0\1\104"+
    "\4\0\1\105\104\0\1\103\1\0\1\106\1\107\2\110"+
    "\2\111\1\112\4\0\1\113\1\114\1\0\1\115\1\114"+
    "\1\116\7\0\1\113\1\114\1\113\4\0\1\115\3\0"+
    "\1\114\6\0\1\116\31\0\1\103\1\0\7\25\4\0"+
    "\1\113\1\114\1\0\1\115\1\114\10\0\1\113\1\114"+
    "\1\113\4\0\1\115\3\0\1\114\16\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\21\15\1\117"+
    "\1\15\1\120\5\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\16\15\1\121"+
    "\1\15\1\122\10\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\1\15\1\123"+
    "\6\15\1\124\2\15\1\125\2\15\1\126\12\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\5\15\1\127\10\15\1\130\10\15\1\131"+
    "\1\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\13\15\1\132\1\15\1\133"+
    "\10\15\1\134\2\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\1\15\1\135"+
    "\11\15\1\136\2\15\1\137\1\15\1\140\10\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\16\15\1\120\12\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\6\15\1\141\6\15\1\142\13\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\16\15\1\143\12\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\23\15\1\144"+
    "\5\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\1\15\1\145\3\15\1\146"+
    "\23\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\17\15\1\147\11\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\20\15\1\150\2\15\1\151\5\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\5\15\1\152\23\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\10\15\1\153\1\154\10\15\1\155\2\15\1\156\3\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\5\15\1\157\2\15\1\160\7\15"+
    "\1\161\6\15\1\162\1\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\15\15"+
    "\1\163\3\15\1\164\7\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\11\15"+
    "\1\165\4\15\1\166\12\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\3\15"+
    "\1\167\4\15\1\170\20\15\2\0\1\15\2\0\2\56"+
    "\1\0\2\56\1\0\2\56\1\0\35\56\1\0\37\56"+
    "\2\0\1\57\103\0\5\171\1\172\77\171\1\0\5\63"+
    "\1\173\77\63\3\0\3\66\1\174\75\0\1\66\2\0"+
    "\2\175\4\0\2\175\1\176\72\175\1\0\1\175\1\0"+
    "\2\177\4\0\27\177\1\200\45\177\1\0\1\177\56\0"+
    "\1\201\113\0\1\202\1\0\1\203\2\0\1\204\73\0"+
    "\1\205\6\0\1\206\101\0\1\207\114\0\1\210\102\0"+
    "\1\211\71\0\1\212\60\0\7\103\4\0\1\113\1\114"+
    "\2\0\1\114\10\0\1\113\1\114\1\113\10\0\1\114"+
    "\16\0\16\104\1\213\67\104\2\105\4\0\40\105\1\214"+
    "\34\105\1\0\1\105\23\0\1\103\1\0\1\106\1\107"+
    "\2\110\2\111\1\112\4\0\1\113\1\114\1\0\1\115"+
    "\1\114\10\0\1\113\1\114\1\113\4\0\1\115\3\0"+
    "\1\114\40\0\1\103\1\0\6\111\1\112\4\0\1\113"+
    "\1\114\1\0\1\115\1\114\10\0\1\113\1\114\1\113"+
    "\4\0\1\115\3\0\1\114\40\0\1\103\1\0\6\215"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\216\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\40\0\1\103\1\0\7\112\4\0\1\113"+
    "\1\114\2\0\1\114\10\0\1\113\1\114\1\113\10\0"+
    "\1\114\35\0\1\217\1\0\1\217\2\0\7\220\77\0"+
    "\1\221\6\222\3\0\3\222\10\0\6\222\27\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\14\15"+
    "\1\141\14\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\22\15\1\223\6\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\16\15\1\224\12\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\5\15\1\225\23\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\21\15"+
    "\1\226\1\227\6\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\1\15\1\230"+
    "\27\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\1\15\1\231\27\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\15\15\1\232\13\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\6\15\1\233\4\15\1\234\15\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\23\15\1\235\5\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\15\15\1\236"+
    "\13\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\21\15\1\226\7\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\23\15\1\117\5\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\17\15\1\237\2\15\1\240\6\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\13\15\1\132\15\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\16\15\1\241"+
    "\12\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\20\15\1\141\10\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\11\15\1\242\17\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\13\15\1\243\6\15\1\244\6\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\15\15\1\245\13\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\22\15\1\246"+
    "\6\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\14\15\1\247\14\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\25\15\1\141\3\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\5\15\1\250\23\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\11\15\1\251"+
    "\4\15\1\252\12\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\2\15\1\253"+
    "\26\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\7\15\1\254\1\15\1\255"+
    "\7\15\1\256\1\257\6\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\16\15"+
    "\1\260\12\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\7\15\1\261\20\15"+
    "\1\262\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\1\15\1\263\16\15\1\264"+
    "\10\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\11\15\1\265\17\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\14\15\1\266\14\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\11\15\1\267\6\15\1\270\10\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\23\15\1\226\3\15\1\141\1\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\17\15\1\271\11\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\11\15\1\272"+
    "\7\15\1\273\7\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\11\15\1\274"+
    "\17\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\20\15\1\275\10\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\11\15\1\276\1\15\1\277\15\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\10\15\1\300\20\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\11\15\1\301\17\15\2\0\1\15\4\0\1\171\105\0"+
    "\1\63\105\0\1\66\161\0\1\77\110\0\1\302\7\0"+
    "\1\303\70\0\1\304\121\0\1\305\71\0\1\306\10\0"+
    "\1\211\73\0\1\307\117\0\1\303\71\0\1\310\110\0"+
    "\1\306\121\0\1\311\15\0\16\104\1\213\4\104\1\312"+
    "\62\104\5\105\1\313\40\105\1\214\36\105\23\0\1\103"+
    "\1\0\6\314\1\112\4\0\1\113\1\114\1\0\1\115"+
    "\1\114\10\0\1\113\1\114\1\113\4\0\1\115\3\0"+
    "\1\114\40\0\1\103\1\0\6\315\1\112\4\0\1\113"+
    "\1\114\1\0\1\115\1\114\10\0\1\113\1\114\1\113"+
    "\4\0\1\115\3\0\1\114\42\0\7\220\77\0\7\220"+
    "\4\0\1\113\14\0\1\113\1\0\1\113\53\0\1\221"+
    "\6\222\3\0\3\222\1\0\1\115\6\0\6\222\4\0"+
    "\1\115\46\0\7\316\3\0\3\316\1\0\1\115\6\0"+
    "\6\316\4\0\1\115\22\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\16\15\1\141\12\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\13\15\1\244\15\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\1\15\1\317\27\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\5\15\1\141"+
    "\23\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\3\15\1\320\25\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\20\15\1\321\10\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\21\15\1\267\7\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\21\15\1\322"+
    "\1\323\6\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\1\15\1\324\27\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\5\15\1\325\23\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\2\15\1\326\26\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\1\15"+
    "\1\327\27\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\13\15\1\330\15\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\5\15\1\331\23\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\1\15\1\332\27\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\5\15"+
    "\1\333\23\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\11\15\1\334\17\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\7\15\1\244\21\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\1\15\1\335\27\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\5\15"+
    "\1\336\23\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\20\15\1\337\10\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\24\15\1\340\4\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\22\15\1\341\6\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\13\15"+
    "\1\342\15\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\11\15\1\343\17\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\15\15\1\344\13\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\22\15\1\345\6\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\23\15"+
    "\1\331\5\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\20\15\1\332\10\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\15\15\1\346\13\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\5\15\1\347\23\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\22\15"+
    "\1\350\6\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\23\15\1\351\5\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\22\15\1\227\6\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\17\15\1\352\11\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\21\15"+
    "\1\141\7\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\16\15\1\146\12\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\5\15\1\353\23\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\16\15\1\354\12\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\11\15"+
    "\1\355\17\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\15\15\1\356\13\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\22\15\1\357\6\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\4\15\1\244\24\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\1\15"+
    "\1\360\27\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\1\15\1\361\27\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\13\15\1\226\15\15\2\0\1\15"+
    "\60\0\1\362\104\0\1\362\111\0\1\302\112\0\1\363"+
    "\74\0\1\302\113\0\1\364\101\0\1\365\113\0\1\366"+
    "\20\0\3\105\3\0\40\105\1\214\34\105\1\0\1\105"+
    "\23\0\1\103\1\0\6\367\1\112\4\0\1\113\1\114"+
    "\1\0\1\115\1\114\10\0\1\113\1\114\1\113\4\0"+
    "\1\115\3\0\1\114\40\0\1\103\1\0\6\370\1\112"+
    "\4\0\1\113\1\114\1\0\1\115\1\114\10\0\1\113"+
    "\1\114\1\113\4\0\1\115\3\0\1\114\42\0\7\371"+
    "\3\0\3\371\1\0\1\115\6\0\6\371\4\0\1\115"+
    "\22\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\12\15\1\141\16\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\10\15"+
    "\1\141\20\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\1\15\1\372\1\15\1\373\3\15\3\0\7\15"+
    "\3\0\31\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\22\15\1\374\6\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\11\15\1\375\17\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\23\15\1\376\5\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\22\15"+
    "\1\226\6\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\13\15\1\377\15\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\14\15\1\u0100\14\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\11\15\1\u0101\17\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\20\15"+
    "\1\354\10\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\22\15\1\244\6\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\15\15\1\u0102\13\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\15\15\1\226\13\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\2\15"+
    "\1\301\26\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\21\15\1\u0103\7\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\1\15\1\u0104\27\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\1\15\1\325\27\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\5\15"+
    "\1\u0105\23\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\11\15\1\u0106\17\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\21\15\1\u0107\7\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\22\15\1\u0108\6\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\20\15"+
    "\1\u0109\10\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\5\15\1\276\23\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\16\15\1\u010a\12\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\11\15\1\u010b\17\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\3\15"+
    "\1\u010c\25\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\13\15\1\340\15\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\4\15\1\u010d\4\15\1\u0102\3\15"+
    "\1\u010e\13\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\15\15\1\141\13\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\7\15\1\261\21\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\7\15\1\141\21\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\23\15"+
    "\1\u010f\5\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\22\15\1\170\6\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\20\15\1\u0110\10\15\2\0\1\15"+
    "\72\0\1\362\110\0\1\u0111\76\0\1\u0112\102\0\1\u0113"+
    "\46\0\1\103\1\0\6\u0114\1\112\4\0\1\113\1\114"+
    "\1\0\1\115\1\114\10\0\1\113\1\114\1\113\4\0"+
    "\1\115\3\0\1\114\40\0\1\103\1\0\6\u0115\1\112"+
    "\4\0\1\113\1\114\1\0\1\115\1\114\10\0\1\113"+
    "\1\114\1\113\4\0\1\115\3\0\1\114\42\0\7\u0116"+
    "\3\0\3\u0116\1\0\1\115\6\0\6\u0116\4\0\1\115"+
    "\22\0\1\15\11\0\1\15\11\0\5\15\1\u0110\1\15"+
    "\3\0\7\15\3\0\31\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\2\15\1\u0110\4\15\3\0\7\15"+
    "\3\0\31\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\1\u0117\30\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\15\15\1\u0118\13\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\13\15\1\u010c\15\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\5\15\1\244"+
    "\23\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\11\15\1\u0119\17\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\3\15\1\u011a\25\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\4\15\1\141\24\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\17\15\1\u011b"+
    "\11\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\22\15\1\u011c\6\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\3\15\1\u011d\25\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\3\15\1\141\25\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\22\15\1\u011e"+
    "\6\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\5\15\1\u011f\23\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\11\15\1\351\17\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\6\15\1\141\22\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\3\15\1\374"+
    "\25\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\22\15\1\141\6\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\7\15\3\0"+
    "\7\15\3\0\5\15\1\u010a\23\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\7\15\3\0\7\15\3\0"+
    "\1\15\1\u0120\27\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\7\15\3\0\7\15\3\0\1\15\1\u0121"+
    "\27\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\7\15\3\0\7\15\3\0\1\332\30\15\2\0\1\15"+
    "\56\0\1\u0122\102\0\1\362\121\0\1\u0123\42\0\1\103"+
    "\1\0\6\u0124\1\112\4\0\1\113\1\114\1\0\1\115"+
    "\1\114\10\0\1\113\1\114\1\113\4\0\1\115\3\0"+
    "\1\114\40\0\1\103\1\0\6\u0125\1\112\4\0\1\113"+
    "\1\114\1\0\1\115\1\114\10\0\1\113\1\114\1\113"+
    "\4\0\1\115\3\0\1\114\42\0\7\u0126\3\0\3\u0126"+
    "\1\0\1\115\6\0\6\u0126\4\0\1\115\22\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\3\15"+
    "\1\u0127\25\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\23\15\1\226\5\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\3\15\1\u0128\25\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\11\15\1\u010c\17\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\1\15"+
    "\1\u0129\27\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\16\15\1\137\12\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\22\15\1\u012a\6\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\5\15\1\137\23\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\20\15"+
    "\1\u012b\10\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\14\15\1\226\14\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\13\15\1\141\15\15\2\0\1\15"+
    "\57\0\1\u012c\107\0\1\362\50\0\1\103\1\0\6\u012d"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u012e\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u012f\3\0\3\u012f\1\0\1\115"+
    "\6\0\6\u012f\4\0\1\115\22\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\1\15\1\u0130\27\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\3\15\1\226\25\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\5\15\1\u0102\23\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\17\15"+
    "\1\u0131\11\15\2\0\1\15\24\0\1\103\1\0\6\u0132"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u0133\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u0134\3\0\3\u0134\1\0\1\115"+
    "\6\0\6\u0134\4\0\1\115\22\0\1\15\11\0\1\15"+
    "\11\0\7\15\3\0\7\15\3\0\21\15\1\u010c\7\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\7\15"+
    "\3\0\7\15\3\0\20\15\1\u0135\10\15\2\0\1\15"+
    "\24\0\1\103\1\0\6\u0136\1\112\4\0\1\113\1\114"+
    "\1\0\1\115\1\114\10\0\1\113\1\114\1\113\4\0"+
    "\1\115\3\0\1\114\40\0\1\103\1\0\6\u0137\1\112"+
    "\4\0\1\113\1\114\1\0\1\115\1\114\10\0\1\113"+
    "\1\114\1\113\4\0\1\115\3\0\1\114\42\0\7\u0138"+
    "\3\0\3\u0138\1\0\1\115\6\0\6\u0138\4\0\1\115"+
    "\22\0\1\15\11\0\1\15\11\0\7\15\3\0\7\15"+
    "\3\0\5\15\1\u0139\23\15\2\0\1\15\24\0\1\103"+
    "\1\0\6\u013a\1\112\4\0\1\113\1\114\1\0\1\115"+
    "\1\114\10\0\1\113\1\114\1\113\4\0\1\115\3\0"+
    "\1\114\40\0\1\103\1\0\6\u013b\1\112\4\0\1\113"+
    "\1\114\1\0\1\115\1\114\10\0\1\113\1\114\1\113"+
    "\4\0\1\115\3\0\1\114\42\0\7\u013c\3\0\3\u013c"+
    "\1\0\1\115\6\0\6\u013c\4\0\1\115\22\0\1\15"+
    "\11\0\1\15\11\0\7\15\3\0\7\15\3\0\22\15"+
    "\1\u0128\6\15\2\0\1\15\24\0\1\103\1\0\6\u013d"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u013e\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u013f\3\0\3\u013f\1\0\1\115"+
    "\6\0\6\u013f\4\0\1\115\44\0\1\103\1\0\6\u0140"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u0141\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u0142\3\0\3\u0142\1\0\1\115"+
    "\6\0\6\u0142\4\0\1\115\44\0\1\103\1\0\6\u0143"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u0144\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u0145\3\0\3\u0145\1\0\1\115"+
    "\6\0\6\u0145\4\0\1\115\44\0\1\103\1\0\6\u0146"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u0147\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u0148\3\0\3\u0148\1\0\1\115"+
    "\6\0\6\u0148\4\0\1\115\44\0\1\103\1\0\6\u0149"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u014a\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u014b\3\0\3\u014b\1\0\1\115"+
    "\6\0\6\u014b\4\0\1\115\44\0\1\103\1\0\6\u014c"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\40\0"+
    "\1\103\1\0\6\u014d\1\112\4\0\1\113\1\114\1\0"+
    "\1\115\1\114\10\0\1\113\1\114\1\113\4\0\1\115"+
    "\3\0\1\114\42\0\7\u014e\3\0\3\u014e\1\0\1\115"+
    "\6\0\6\u014e\4\0\1\115\44\0\1\103\1\0\6\u014f"+
    "\1\112\4\0\1\113\1\114\1\0\1\115\1\114\10\0"+
    "\1\113\1\114\1\113\4\0\1\115\3\0\1\114\42\0"+
    "\7\u0150\3\0\3\u0150\1\0\1\115\6\0\6\u0150\4\0"+
    "\1\115\44\0\1\103\1\0\6\u0151\1\112\4\0\1\113"+
    "\1\114\1\0\1\115\1\114\10\0\1\113\1\114\1\113"+
    "\4\0\1\115\3\0\1\114\60\0\1\115\20\0\1\115"+
    "\44\0\1\103\1\0\6\u0152\1\112\4\0\1\113\1\114"+
    "\1\0\1\115\1\114\10\0\1\113\1\114\1\113\4\0"+
    "\1\115\3\0\1\114\40\0\1\103\1\0\6\u0153\1\112"+
    "\4\0\1\113\1\114\1\0\1\115\1\114\10\0\1\113"+
    "\1\114\1\113\4\0\1\115\3\0\1\114\40\0\1\103"+
    "\1\0\6\u0154\1\112\4\0\1\113\1\114\1\0\1\115"+
    "\1\114\10\0\1\113\1\114\1\113\4\0\1\115\3\0"+
    "\1\114\40\0\1\103\1\0\7\112\4\0\1\113\1\114"+
    "\1\0\1\115\1\114\10\0\1\113\1\114\1\113\4\0"+
    "\1\115\3\0\1\114\16\0";

	private static int [] zzUnpacktrans() {
		int [] result = new int[21420];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/** Error code for "Unknown internal scanner error". */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/** Error code for "could not match input". */
	private static final int ZZ_NO_MATCH = 1;
	/** Error code for "pushback value was too large". */
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = {
		"Unknown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\3\11\1\1\2\11\2\1\4\11\4\1\3\11"+
    "\23\1\2\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\4\1\10\0\10\1\1\11\1\0\1\11"+
    "\1\0\52\1\1\11\3\1\1\0\1\1\1\0\1\1"+
    "\4\0\1\1\6\0\3\1\1\0\62\1\10\0\1\11"+
    "\47\1\1\11\4\0\32\1\3\0\16\1\2\0\10\1"+
    "\1\11\17\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\4\1";

	private static int [] zzUnpackAttribute() {
		int [] result = new int[340];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/** Input device. */
	private java.io.Reader zzReader;

	/** Current state of the DFA. */
	private int zzState;

	/** Current lexical state. */
	private int zzLexicalState = YYINITIAL;

	/**
	 * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
	 * string.
	 */
	private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

	/** Text position at the last accepting state. */
	private int zzMarkedPos;

	/** Current text position in the buffer. */
	private int zzCurrentPos;

	/** Marks the beginning of the {@link #yytext()} string in the buffer. */
	private int zzStartRead;

	/** Marks the last character in the buffer, that has been read from input. */
	private int zzEndRead;

	/**
	 * Whether the scanner is at the end of file.
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;

	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
	 *
	 * <p>When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/** Number of newlines encountered up to the start of the matched text. */
	private int yyline;

	/** Number of characters from the last newline up to the start of the matched text. */
	private int yycolumn;

	/** Number of characters up to the start of the matched text. */
	private long yychar;

	/** Whether the scanner is currently at the beginning of a line. */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/** Whether the user-EOF-code has already been executed. */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */



	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	public CppLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
	private int zzMaxBufferLen() {
		return Integer.MAX_VALUE;
	}

	/**  Whether the scanner buffer can grow to accommodate a larger token. */
	private boolean zzCanGrow() {
		return true;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @exception java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
							 zzBuffer, 0,
							 zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
			/* if not, and it can grow: blow it up */
			char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			if (requested == 0) {
				throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
			}
			else {
				throw new java.io.IOException(
					"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
			}
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
				if (numRead == requested) { // We requested too few chars to encode a full Unicode character
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				} else {                    // There is room in the buffer for at least one more char
					int c = zzReader.read();  // Expecting to read a paired low surrogate char
					if (c == -1) {
						return true;
					} else {
						zzBuffer[zzEndRead++] = (char)c;
					}
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}


	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; // indicate end of file
		zzEndRead = zzStartRead; // invalidate buffer

		if (zzReader != null) {
			zzReader.close();
		}
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>Does not close the old reader.
	 *
	 * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
	 *
	 * <p>Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzEOFDone = false;
		yyResetPosition();
		zzLexicalState = YYINITIAL;
		int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
		if (zzBuffer.length > initBufferSize) {
			zzBuffer = new char[initBufferSize];
		}
	}

	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition() {
		zzAtBOL  = true;
		zzAtEOF  = false;
		zzCurrentPos = 0;
		zzMarkedPos = 0;
		zzStartRead = 0;
		zzEndRead = 0;
		zzFinalHighSurrogate = 0;
		yyline = 0;
		yycolumn = 0;
		yychar = 0L;
	}


	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF() {
		return zzAtEOF;
	}


	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
	 *
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position) {
		return zzBuffer[zzStartRead + position];
	}


	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos-zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen".
	 *
	 * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again. This number must not be greater than
	 *     {@link #yylength()}.
	 */
	public void yypushback(int number)  {
		if ( number > yylength() )
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}




	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered
	 * or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @exception java.io.IOException if any I/O-Error occurs.
	 */
	public int yylex() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;

		int [] zzTransL = ZZ_TRANS;
		int [] zzRowMapL = ZZ_ROWMAP;
		int [] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar+= zzMarkedPosL-zzStartRead;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead  ;
				 zzCurrentPosL < zzMarkedPosL ;
			zzCurrentPosL += zzCharCount ) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':  // fall through
					case '\u000C':  // fall through
					case '\u0085':  // fall through
					case '\u2028':  // fall through
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is
				// (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ( (zzAttributes & 1) == 1 ) {
				zzAction = zzState;
			}


			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					}
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos  = zzCurrentPosL;
						zzMarkedPos   = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL  = zzCurrentPos;
						zzMarkedPosL   = zzMarkedPos;
						zzBufferL      = zzBuffer;
						zzEndReadL     = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ( (zzAttributes & 1) == 1 ) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ( (zzAttributes & 8) == 8 ) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return EOF;
				}
			}
			else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1:
						{ return ERROR;
						}
						// fall through
					case 30: break;
					case 2:
						{ return WHITE_SPACE;
						}
						// fall through
					case 31: break;
					case 3:
						{ return NEW_LINE;
						}
						// fall through
					case 32: break;
					case 4:
						{ return OPERATOR;
						}
						// fall through
					case 33: break;
					case 5:
						{ yybegin(STRING); return STRING_LITERAL;
						}
						// fall through
					case 34: break;
					case 6:
						{ return IDENTIFIER;
						}
						// fall through
					case 35: break;
					case 7:
						{ yybegin(CHARLITERAL);return CHARACTER_LITERAL;
						}
						// fall through
					case 36: break;
					case 8:
						{ return LPAREN;
						}
						// fall through
					case 37: break;
					case 9:
						{ return RPAREN;
						}
						// fall through
					case 38: break;
					case 10:
						{ return COMMA;
						}
						// fall through
					case 39: break;
					case 11:
						{ return DOT;
						}
						// fall through
					case 40: break;
					case 12:
						{ return INTEGER_LITERAL;
						}
						// fall through
					case 41: break;
					case 13:
						{ return SEMICOLON;
						}
						// fall through
					case 42: break;
					case 14:
						{ return LBRACK;
						}
						// fall through
					case 43: break;
					case 15:
						{ return RBRACK;
						}
						// fall through
					case 44: break;
					case 16:
						{ return LBRACE;
						}
						// fall through
					case 45: break;
					case 17:
						{ return RBRACE;
						}
						// fall through
					case 46: break;
					case 18:
						{ return STRING_LITERAL;
						}
						// fall through
					case 47: break;
					case 19:
						{ yybegin(YYINITIAL);return NEW_LINE;
						}
						// fall through
					case 48: break;
					case 20:
						{ yybegin(YYINITIAL);return STRING_LITERAL;
						}
						// fall through
					case 49: break;
					case 21:
						{ return CHARACTER_LITERAL;
						}
						// fall through
					case 50: break;
					case 22:
						{ yybegin(YYINITIAL);return CHARACTER_LITERAL;
						}
						// fall through
					case 51: break;
					case 23:
						{ return PRETREATMENT_LINE;
						}
						// fall through
					case 52: break;
					case 24:
						{ return FLOATING_POINT_LITERAL;
						}
						// fall through
					case 53: break;
					case 25:
						{ return COMMENT;
						}
						// fall through
					case 54: break;
					case 26:
						{ return KEYWORD;
						}
						// fall through
					case 55: break;
					case 27:
						{ { yybegin(PRETREATMENT);return PRETREATMENT_LINE; }
						}
						// fall through
					case 56: break;
					case 28:
						{ return TYPE;
						}
						// fall through
					case 57: break;
					case 29:
						{ yybegin(INCLUDE);return PRETREATMENT_LINE;
						}
						// fall through
					case 58: break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}

